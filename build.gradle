plugins {
    id("java")
    id("io.quarkus")
    id("com.github.spotbugs") version "6.1.7"
    id("com.tngtech.jgiven.gradle-plugin") version "2.0.2"
    id("com.github.ben-manes.versions") version "0.52.0"
    id("io.gatling.gradle") version "3.13.5.2"
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    gatling {
        java.srcDirs = ["src/gatling/java"]
        resources.srcDirs = ["src/gatling/resources"]
    }
}

dependencies {
    implementation('io.quarkus:quarkus-micrometer-registry-prometheus')
    implementation('io.quarkus:quarkus-jsonb')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('io.quarkus:quarkus-rest-client-jackson')
    implementation('io.quarkus:quarkus-hibernate-validator')
    implementation('io.quarkus:quarkus-smallrye-openapi')
    implementation('io.quarkus:quarkus-liquibase')
    implementation('io.quarkus:quarkus-config-yaml')
    implementation('io.quarkus:quarkus-jdbc-postgresql')
    implementation('io.quarkus:quarkus-hibernate-orm')
    implementation('io.quarkus:quarkus-rest-jackson')
    implementation('io.quarkus:quarkus-logging-json')
    implementation('io.quarkus:quarkus-hibernate-orm-panache')
    implementation('io.quarkus:quarkus-smallrye-health')
    implementation(enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}"))
    implementation('io.quarkus:quarkus-rest')
    implementation('io.quarkus:quarkus-arc')
    implementation('io.quarkus:quarkus-container-image-docker')
    implementation('io.quarkus:quarkus-oidc')

    implementation('io.quarkus:quarkus-jdbc-h2')
    testImplementation('io.quarkus:quarkus-junit5')
    testImplementation('io.rest-assured:rest-assured')
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("io.quarkus:quarkus-test-security")

    testImplementation("com.tngtech.archunit:archunit:${archunitVersion}")

    testImplementation 'org.apache.commons:commons-lang3:3.17.0'

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    nativeTestCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    nativeTestAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    implementation("org.mapstruct:mapstruct:${mapStructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapStructVersion}")
    testImplementation("org.mapstruct:mapstruct:${mapStructVersion}")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapStructVersion}")

    testImplementation("io.quarkiverse.wiremock:quarkus-wiremock:${quarkusWiremockVersion}")
    testImplementation("io.quarkiverse.wiremock:quarkus-wiremock-test:${quarkusWiremockVersion}")

    compileOnly("com.github.spotbugs:spotbugs-annotations:${spotBugsVersion}")
    testCompileOnly("com.github.spotbugs:spotbugs-annotations:${spotBugsVersion}")
    nativeTestCompileOnly("com.github.spotbugs:spotbugs-annotations:${spotBugsVersion}")

    nativeTestImplementation('org.testcontainers:testcontainers')
    nativeTestImplementation('org.testcontainers:junit-jupiter')
    nativeTestImplementation('org.testcontainers:postgresql')
    nativeTestImplementation('org.testcontainers:mockserver')
    nativeTestImplementation 'com.github.dasniko:testcontainers-keycloak:3.6.0'

    // Quarkus Testing
    nativeTestImplementation('io.quarkus:quarkus-junit5')
    nativeTestImplementation('io.rest-assured:rest-assured')


    gatlingImplementation 'io.gatling:gatling-core:3.13.5'
    gatlingImplementation 'io.gatling:gatling-http:3.13.5'
    gatlingImplementation 'com.fasterxml.jackson.core:jackson-databind'
    gatlingImplementation("jakarta.ws.rs:jakarta.ws.rs-api:4.0.0")
    gatlingImplementation('io.rest-assured:rest-assured:5.5.1')
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

group = project.findProperty("group") ?: "com.example"
version = project.hasProperty('buildVersion') ? project.buildVersion : '1.0.0'